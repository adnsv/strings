
#pragma once

// DO NOT EDIT: Generated file
// clang-format off

#include <cstdint>
#include <iterator>
#include "codepoint.hpp"

namespace strings::fold {

namespace detail::unicode_simple {

// simple, language-independent case foldings
// generated from: unicode.org/Public/UCD/latest/ucd/CaseFolding.txt
// total: 316 entries, 2528 bytes

struct lookup_entry {
	codepoint cp;   // first codepoint in block
	int32_t offset; //     0: fold to self
					//    +1: interleave +1,0,+1,0, ...
					// other: folded = cp + offset
};

constexpr lookup_entry lookup_table[316] = {
	{0x0,0},{0x41,32},{0x5b,0},{0xb5,775},{0xb6,0},{0xc0,32},{0xd7,0},{0xd8,32},{0xdf,0},{0x100,1},{0x130,0},{0x132,1},{0x138,0},
	{0x139,1},{0x149,0},{0x14a,1},{0x178,-121},{0x179,1},{0x17f,-268},{0x180,0},{0x181,210},{0x182,1},{0x186,206},{0x187,1},{0x189,205},
	{0x18b,1},{0x18d,0},{0x18e,79},{0x18f,202},{0x190,203},{0x191,1},{0x193,205},{0x194,207},{0x195,0},{0x196,211},{0x197,209},
	{0x198,1},{0x19a,0},{0x19c,211},{0x19d,213},{0x19e,0},{0x19f,214},{0x1a0,1},{0x1a6,218},{0x1a7,1},{0x1a9,218},{0x1aa,0},{0x1ac,1},
	{0x1ae,218},{0x1af,1},{0x1b1,217},{0x1b3,1},{0x1b7,219},{0x1b8,1},{0x1ba,0},{0x1bc,1},{0x1be,0},{0x1c4,2},{0x1c5,1},{0x1c7,2},
	{0x1c8,1},{0x1ca,2},{0x1cb,1},{0x1dd,0},{0x1de,1},{0x1f0,0},{0x1f1,2},{0x1f2,1},{0x1f6,-97},{0x1f7,-56},{0x1f8,1},{0x220,-130},
	{0x221,0},{0x222,1},{0x234,0},{0x23a,10795},{0x23b,1},{0x23d,-163},{0x23e,10792},{0x23f,0},{0x241,1},{0x243,-195},{0x244,69},
	{0x245,71},{0x246,1},{0x250,0},{0x345,116},{0x346,0},{0x370,1},{0x374,0},{0x376,1},{0x378,0},{0x37f,116},{0x380,0},{0x386,38},
	{0x387,0},{0x388,37},{0x38b,0},{0x38c,64},{0x38d,0},{0x38e,63},{0x390,0},{0x391,32},{0x3a2,0},{0x3a3,32},{0x3ac,0},{0x3c2,1},
	{0x3c4,0},{0x3cf,8},{0x3d0,-30},{0x3d1,-25},{0x3d2,0},{0x3d5,-15},{0x3d6,-22},{0x3d7,0},{0x3d8,1},{0x3f0,-54},{0x3f1,-48},
	{0x3f2,0},{0x3f4,-60},{0x3f5,-64},{0x3f6,0},{0x3f7,1},{0x3f9,-7},{0x3fa,1},{0x3fc,0},{0x3fd,-130},{0x400,80},{0x410,32},{0x430,0},
	{0x460,1},{0x482,0},{0x48a,1},{0x4c0,15},{0x4c1,1},{0x4cf,0},{0x4d0,1},{0x530,0},{0x531,48},{0x557,0},{0x10a0,7264},{0x10c6,0},
	{0x10c7,7264},{0x10c8,0},{0x10cd,7264},{0x10ce,0},{0x13f8,-8},{0x13fe,0},{0x1c80,-6222},{0x1c81,-6221},{0x1c82,-6212},{0x1c83,-6210},
	{0x1c85,-6211},{0x1c86,-6204},{0x1c87,-6180},{0x1c88,35267},{0x1c89,0},{0x1c90,-3008},{0x1cbb,0},{0x1cbd,-3008},{0x1cc0,0},
	{0x1e00,1},{0x1e96,0},{0x1e9b,-58},{0x1e9c,0},{0x1e9e,-7615},{0x1e9f,0},{0x1ea0,1},{0x1f00,0},{0x1f08,-8},{0x1f10,0},{0x1f18,-8},
	{0x1f1e,0},{0x1f28,-8},{0x1f30,0},{0x1f38,-8},{0x1f40,0},{0x1f48,-8},{0x1f4e,0},{0x1f59,-8},{0x1f5a,0},{0x1f5b,-8},{0x1f5c,0},
	{0x1f5d,-8},{0x1f5e,0},{0x1f5f,-8},{0x1f60,0},{0x1f68,-8},{0x1f70,0},{0x1f88,-8},{0x1f90,0},{0x1f98,-8},{0x1fa0,0},{0x1fa8,-8},
	{0x1fb0,0},{0x1fb8,-8},{0x1fba,-74},{0x1fbc,-9},{0x1fbd,0},{0x1fbe,-7173},{0x1fbf,0},{0x1fc8,-86},{0x1fcc,-9},{0x1fcd,0},
	{0x1fd8,-8},{0x1fda,-100},{0x1fdc,0},{0x1fe8,-8},{0x1fea,-112},{0x1fec,-7},{0x1fed,0},{0x1ff8,-128},{0x1ffa,-126},{0x1ffc,-9},
	{0x1ffd,0},{0x2126,-7517},{0x2127,0},{0x212a,-8383},{0x212b,-8262},{0x212c,0},{0x2132,28},{0x2133,0},{0x2160,16},{0x2170,0},
	{0x2183,1},{0x2185,0},{0x24b6,26},{0x24d0,0},{0x2c00,48},{0x2c30,0},{0x2c60,1},{0x2c62,-10743},{0x2c63,-3814},{0x2c64,-10727},
	{0x2c65,0},{0x2c67,1},{0x2c6d,-10780},{0x2c6e,-10749},{0x2c6f,-10783},{0x2c70,-10782},{0x2c71,0},{0x2c72,1},{0x2c74,0},{0x2c75,1},
	{0x2c77,0},{0x2c7e,-10815},{0x2c80,1},{0x2ce4,0},{0x2ceb,1},{0x2cef,0},{0x2cf2,1},{0x2cf4,0},{0xa640,1},{0xa66e,0},{0xa680,1},
	{0xa69c,0},{0xa722,1},{0xa730,0},{0xa732,1},{0xa770,0},{0xa779,1},{0xa77d,-35332},{0xa77e,1},{0xa788,0},{0xa78b,1},{0xa78d,-42280},
	{0xa78e,0},{0xa790,1},{0xa794,0},{0xa796,1},{0xa7aa,-42308},{0xa7ab,-42319},{0xa7ac,-42315},{0xa7ad,-42305},{0xa7ae,-42308},
	{0xa7af,0},{0xa7b0,-42258},{0xa7b1,-42282},{0xa7b2,-42261},{0xa7b3,928},{0xa7b4,1},{0xa7c4,-48},{0xa7c5,-42307},{0xa7c6,-35384},
	{0xa7c7,1},{0xa7cb,0},{0xa7d0,1},{0xa7d2,0},{0xa7d6,1},{0xa7da,0},{0xa7f5,1},{0xa7f7,0},{0xab70,-38864},{0xabc0,0},{0xff21,32},
	{0xff3b,0},{0x10400,40},{0x10428,0},{0x104b0,40},{0x104d4,0},{0x10570,39},{0x1057b,0},{0x1057c,39},{0x1058b,0},{0x1058c,39},
	{0x10593,0},{0x10594,39},{0x10596,0},{0x10c80,64},{0x10cb3,0},{0x118a0,32},{0x118c0,0},{0x16e40,32},{0x16e60,0},{0x1e900,34},
	{0x1e922,0},
};

} // namespace detail::simple

constexpr auto unicode_simple(codepoint cp) -> codepoint {
	auto entry = std::begin(detail::unicode_simple::lookup_table) + 1;
	while (entry != std::end(detail::unicode_simple::lookup_table) && entry->cp <= cp) 
		++entry;
	--entry;
	auto d = entry->offset;
	if (d == 1) // interleave	
		d -= (cp - entry->cp) & 1;
	return cp + d;
}

} // namespace strings::fold

